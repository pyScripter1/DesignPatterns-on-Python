=======================
Паттерны проектирования
=======================

=======================
Что такое паттерн проектирования?
=======================
Паттерны проектирования (Design Patterns) — это типовые, проверенные временем решения часто возникающих проблем в объектно-ориентированном проектировании. Это не готовый код, а скорее концепция или шаблон, который показывает, как оптимальным образом структурировать классы и объекты для решения конкретной задачи.
Проще говоря, это лучшие практики и «инструкции» для написания гибкого, понятного и легко поддерживаемого кода.
В разработке программного обеспечения паттерн – это общее, многократно используемое решение проблемы, которая часто встречается внутри конкретной ситуации. Это похоже на готовые чертежи, которые можно использовать для решения проблемы в вашем коде.
Стоит отметить, что нельзя применять паттерн проектирования так же, как используется функция из импортированной библиотеки. Вместо этого, вы должны следовать концепции паттерна и реализовать решение, которое соответствует требованиям вашей программы. Паттерн – это не фрагмент кода, а общая концепция, которая описывает, как решить конкретную повторяющуюся проблему.

=======================
Классификация паттернов проектирования
=======================
Изначально существовало две основные классификации паттернов проектирования:

* Какую проблему решает паттерн
* Как относится паттерн к классам и объектам

Принимая во внимание первую классификацию, паттерны можно разделить на три группы:

* Порождающие(generating) – предоставляют возможность создания контролируемым образом, инициализации и конфигурации объектов, классов и типов данных на основе требуемых критериев.
* Структурные(structural) – помогают организовать структуры связанных объектов и классов, предоставляя новые функциональные возможности.
* Поведенческие(behavior) - направлены на выявление общих моделей взаимодействия между объектами.

Позже появились новые паттерны проектирования, из которых можно выделить еще одну категорию:

* Concurrency (параллелизм) – это тот тип паттернов проектирования, который имеет дело с многопоточной парадигмой программирования.




Порождающие паттерны
====================

* Абстрактная фабрика (Abstract Factory) `Python <generating/abstract_factory.py>`_
* Строитель (Builder) `Python <generating/builder.py>`_
* Фабричный метод (Factory Method) `Python <generating/factory_method.py>`_
* Прототип (Prototype) `Python <generating/prototype.py>`_
* Одиночка (Singleton) `Python <generating/singleton.py>`_, `JavaScript <generating/singleton.js>`_


Структурные паттерны
====================

* Модуль (Module) `JavaScript <structural/module.js>`_
* Адаптер (Adapter) `Python <structural/adapter.py>`_
* Мост (Bridge) `Python <structural/bridge.py>`_
* Компоновщик (Composite) `Python <structural/composite.py>`_
* Декоратор (Decorator) `Python <structural/decorator.py>`_
* Фасад (Facade) `Python <structural/facade.py>`_
* Приспособленец (Flyweigth) `Python <structural/flyweight.py>`_
* Заместитель (Proxy) `Python <structural/proxy.py>`_


Паттерны поведения
==================

* Цепочка обязанностей (Chain of Responsibility) `Python <behavior/chain_of_responsibility.py>`_
* Команда (Command) `Python <behavior/command.py>`_
* Интерпретатор (Interpreter) `Python <behavior/interpreter.py>`_
* Итератор (Iterator) `Python <behavior/iterator.py>`_
* Посредник (Mediator) `Python <behavior/mediator.py>`_
* Хранитель (Memento) `Python <behavior/memento.py>`_
* Наблюдатель (Observer) `Python <behavior/observer.py>`_, `JavaScript <behavior/observer.js>`_
* Состояние (State) `Python <behavior/state.py>`_
* Стратегия (Strategy) `Python <behavior/strategy.py>`_
* Шаблонный метод (Template method) `Python <behavior/template_method.py>`_
* Посетитель (Visitor) `Python <behavior/visitor.py>`_
* Классная доска (Blackboard) `Python <behavior/blackboard.py>`_
