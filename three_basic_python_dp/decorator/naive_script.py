# 2. Декоратор (Decorator)
# Назначение: Позволяет динамически добавлять объекту новую функциональность, оборачивая его в другой объект.
#
# Наивный подход (без паттерна):
# Создавать новые классы или методы для каждого нового варианта поведения. Приводит к "взрыву" количества подклассов.

class Coffee:
    def cost(self):
        return 90

class CoffeeWithMilk:
    def cost(self):
        return 90 + 30

class CoffeeWithMilkAndSugar:
    def cost(self):
        return 90 + 30 + 10

# Слишком много классов для простых комбинаций