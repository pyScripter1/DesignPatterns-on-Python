# Правильный подход (с паттерном):
# Используем метод __new__ для контроля процесса создания экземпляра.

class Singleton:
    _instance = None  # Статическая переменная для хранения единственного экземпляра

    def __new__(cls, *args, **kwargs):
        # Метод __new__ вызывается ДО создания объекта
        if cls._instance is None:  # Если экземпляр еще не создан
            cls._instance = super().__new__(cls)  # Создаем новый объект
        return cls._instance  # Всегда возвращаем один и тот же объект


# Использование
s1 = Singleton()  # Создается новый объект
s2 = Singleton()  # Возвращается существующий объект

print(s1 is s2)  # True -> это один и тот же объект